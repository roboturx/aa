// QicsCell.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
// 
// This file is part of PyQicsTable.
// 
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
// 
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


class QicsCell : QicsCellCommon
{
%TypeHeaderCode
#include <QicsCell.h>
%End

public:
    QicsCell(int, int, QicsTable * /TransferThis/, bool = true) /Default/;
    QicsCell(int, int, QicsGridInfo *, bool = true, QObject * /TransferThis/ = 0);
    virtual void setInfo(QicsGridInfo *);
    int rowIndex() const;
    int columnIndex() const;
    int modelRowIndex() const;
    int modelColumnIndex() const;
    bool isValid() const;
    const QicsDataItem *dataValue() const;
    bool isCurrent() const;
    int widthInPixels() const;
    int widthInChars() const;
    int minWidthInPixels() const;
    int minWidthInChars() const;
    int maxWidthInPixels() const;
    int maxWidthInChars() const;
    int heightInPixels() const;
    int heightInChars() const;
    int minHeightInPixels() const;
    int minHeightInChars() const;
    int maxHeightInPixels() const;
    int maxHeightInChars() const;
    bool isHidden() const;

public slots:
    void setRowIndex(int);
    void setColumnIndex(int);
    void setDataValue(const QicsDataItem &);
    void clearDataValue();
    bool addSpan(int, int);
    void removeSpan();
    void setWidthInPixels(int);
    void setWidthInChars(int);
    void setMinWidthInPixels(int);
    void setMinWidthInChars(int);
    void setMaxWidthInPixels(int);
    void setMaxWidthInChars(int);
    void setHeightInPixels(int);
    void setHeightInChars(int);
    void setMinHeightInPixels(int);
    void setMinHeightInChars(int);
    void setMaxHeightInPixels(int);
    void setMaxHeightInChars(int);
    QicsRegion spannedRegion();
private:
    QicsCell(const QicsCell &);
};

