// QicsGridCommon.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
// 
// This file is part of PyQicsTable.
// 
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
// 
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


class QicsGridCommon : QicsCellCommon
{
%TypeHeaderCode
#include <QicsGridCommon.h>
%End

public:
    QicsGridCommon(QObject * /TransferThis/ = 0, bool = false);
    QicsGridCommon(QicsGridInfo *, QObject * /TransferThis/ = 0, bool = false);
    virtual ~QicsGridCommon();
    virtual void setInfo(QicsGridInfo *);
    virtual QicsRegion viewport() const;
    bool addCellSpan(QicsSpan);
    QicsSpanList *cellSpanList();
    bool horizontalGridLinesVisible() const;
    bool verticalGridLinesVisible() const;
    QPen horizontalGridLinePen() const;
    QPen verticalGridLinePen() const;
    bool drawPartialCells() const;
    Qics::QicsGridCellClipping gridCellClipping() const;
    Qics::QicsCellOverflowBehavior cellOverflowBehavior() const;
    int maxOverflowCells() const;
    int frameLineWidth() const;
    int frameStyle() const;
    Qics::QicsCurrentCellStyle currentCellStyle() const;
    int currentCellBorderWidth() const;
    bool clickToEdit() const;
    bool autoSelectCellContents() const;
    Qics::QicsTraversalKeyEditBehavior traversalKeyEditBehavior() const;
    Qt::Orientation enterTraversalDirection() const;
    Qt::Orientation tabTraversalDirection() const;
    QPixmap moreTextPixmap() const;
    QPalette gridPalette() const;
    bool dragEnabled() const;
    Qics::QicsSelectionStyle selectionStyle() const;

protected:
    int horizontalGridLineWidth() const;
    int verticalGridLineWidth() const;
    Qics::QicsLineStyle horizontalGridLineStyle() const;
    Qics::QicsLineStyle verticalGridLineStyle() const;

public slots:
    virtual void setViewport(const QicsRegion &);
    void setSelectionStyle(Qics::QicsSelectionStyle);
    void removeCellSpan(int, int);
    void setHorizontalGridLinesVisible(bool);
    void setVerticalGridLinesVisible(bool);
    void setHorizontalGridLinePen(const QPen &);
    void setVerticalGridLinePen(const QPen &);
    void setDrawPartialCells(bool);
    void setGridCellClipping(Qics::QicsGridCellClipping);
    void setCellOverflowBehavior(Qics::QicsCellOverflowBehavior);
    void setMaxOverflowCells(int);
    void setFrameStyle(int);
    void setFrameLineWidth(int);
    void setCurrentCellStyle(Qics::QicsCurrentCellStyle);
    void setCurrentCellBorderWidth(int);
    void setClickToEdit(bool);
    void setAutoSelectCellContents(bool);
    void setTraversalKeyEditBehavior(Qics::QicsTraversalKeyEditBehavior);
    void setEnterTraversalDirection(Qt::Orientation);
    void setTabTraversalDirection(Qt::Orientation);
    void setMoreTextPixmap(const QPixmap &);
    void setGridPalette(const QPalette &);
    void setDragEnabled(bool);

protected slots:
    void setHorizontalGridLineWidth(int);
    void setVerticalGridLineWidth(int);
    void setHorizontalGridLineStyle(Qics::QicsLineStyle);
    void setVerticalGridLineStyle(Qics::QicsLineStyle);

signals:
    void pressed(int, int, int, const QPoint &);
    void clicked(int, int, int, const QPoint &);
    void doubleClicked(int, int, int, const QPoint &);
    void valueChanged(int, int);

private:
    QicsGridCommon(const QicsGridCommon &);
};

