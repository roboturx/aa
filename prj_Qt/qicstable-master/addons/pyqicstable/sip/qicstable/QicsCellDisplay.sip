// QicsCellDisplay.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
// 
// This file is part of PyQicsTable.
// 
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
// 
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


class QicsCellDisplay : Qics
{
%TypeHeaderCode
#include <QicsCellDisplay.h>
%End

public:
    QicsCellDisplay();
    virtual ~QicsCellDisplay();
    virtual void displayCell(QicsGrid *, int, int, const QicsDataItem *, QRect &, QPainter *) = 0;
    virtual void startEdit(QicsScreenGrid *, int, int, const QicsDataItem *) = 0;
    virtual void moveEdit(QicsScreenGrid *, int, int, const QRect &) = 0;
    virtual void endEdit(QicsScreenGrid *, int, int) = 0;
    virtual bool handleMouseEvent(QicsScreenGrid *, int, int, QMouseEvent *);
    virtual bool handleKeyEvent(QicsScreenGrid *, int, int, QKeyEvent *);
    virtual QSize sizeHint(QicsGrid *, int, int, const QicsDataItem *) = 0;
    virtual bool editWhenCurrent() const = 0;
    virtual bool needsVisibilityNotification() const;
    virtual bool isEmpty(QicsGridInfo *, int, int, const QicsDataItem *) const = 0;
    virtual QString tooltipText(QicsGridInfo *, int, int, const QicsDataItem *, const QRect &) const;

protected:
    virtual void drawBackground(QicsGridInfo *, int, int, const QRect &, const QPalette &, QPainter *, bool = false, bool = false);
    virtual void drawBorder(QicsGridInfo *, int, int, const QRect &, const QPalette &, QPainter *, bool = false, bool = false);
    virtual bool isCellSelected(QicsGridInfo *, int, int);
//    virtual QPalette cellColorGroup(QicsGridInfo *, int, int, bool = false);
    virtual QRect displayableCellArea(QicsGridInfo *, int, int, const QRect &, bool = true, bool = true) const;
};

class QicsNoWidgetCellDisplay : QicsCellDisplay
{
%TypeHeaderCode
#include <QicsCellDisplay.h>
%End

public:
    QicsNoWidgetCellDisplay();
    virtual ~QicsNoWidgetCellDisplay();
    virtual void startEdit(QicsScreenGrid *, int, int, const QicsDataItem *);
    virtual void moveEdit(QicsScreenGrid *, int, int, const QRect &);
    virtual void endEdit(QicsScreenGrid *, int, int);
    virtual bool editWhenCurrent() const;
};

class QicsMovableEntryWidgetCellDisplay : QicsCellDisplay
{
%TypeHeaderCode
#include <QicsCellDisplay.h>
%End

public:
    QicsMovableEntryWidgetCellDisplay();
    virtual ~QicsMovableEntryWidgetCellDisplay();
    virtual void moveEdit(QicsScreenGrid *, int, int, const QRect &);
    virtual void endEdit(QicsScreenGrid *, int, int);
    virtual bool editWhenCurrent() const;

protected:
    class QicsEntryWidgetInfo / NoDefaultCtors /
    {
%TypeHeaderCode
#include <QicsCellDisplay.h>
%End

	QicsEntryWidgetInfo();
        ~QicsEntryWidgetInfo();
        QWidget *widget() const;
        void setWidget(QWidget *);
        QicsScreenGrid *grid() const;
        void setGrid(QicsScreenGrid *);
        int row() const;
        void setRow(int);
        int column() const;
        void setColumn(int);
        QicsDataItem *item() const;
        void setItem(QicsDataItem * /Transfer/);
    }; 

    virtual QWidget *newEntryWidget(QicsScreenGrid *) = 0;
    virtual QRect entryWidgetRect(QicsGridInfo *, int, int, QRect);
};

