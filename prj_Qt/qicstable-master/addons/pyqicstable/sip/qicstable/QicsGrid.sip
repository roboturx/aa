// QicsGrid.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
// 
// This file is part of PyQicsTable.
// 
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
// 
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


class QicsGrid : Qics / NoDefaultCtors /
{
%TypeHeaderCode
#include <QicsGrid.h>
%End

public:
	enum DrawCellMode
    {
        CellBordersOnly = 0x1,
        CellOnly = 0x2,
        WholeCell = 0x3//CellBordersOnly | CellOnly
    };//API-modified

    QicsGrid(QicsGridInfo &);
    QRect cellDimensions(int, int, bool) const;
    virtual ~QicsGrid();
    QicsGridInfo &gridInfo() const;
    virtual void setViewport(const QicsRegion &);
    virtual QicsRegion viewport() const;
    bool isCellValid(int, int) const;
    QRect cellDimensions(const QicsICell &, bool) const;
    virtual QicsRegion currentViewport() const;
//    virtual bool requestCellOverflow(const QicsRegion &, const QRect &, QicsRegion &, QRect &);
//    virtual void acceptCellOverflow(QicsRegion &);
    int modelColumnIndex(int) const;
    int modelRowIndex(int) const;
    virtual void orderRowsBy(QVector <int>, Qics::QicsSortOrder = Ascending, SIP_PYCALLABLE /AllowNone/ = 0) [void (QVector <int>, Qics::QicsSortOrder = Ascending, DataItemComparator = 0)];
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp -> QicsGrid::orderRowsBy(*a0, a1, PyQicsTable_getComparator(a2));
        PyQicsTable_releaseComparator(a2);
        
        Py_END_ALLOW_THREADS
%End

%VirtualCatcherCode
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "BeT", &a0, a1, a2, PyQicsTable_wrapComparator);
        
        if (result != NULL)
        {
            sipParseResult(&sipIsErr, sipMethod, result, "Z");
            Py_DECREF(result);
        }
%End

    virtual void orderColumnsBy(QVector<int>, Qics::QicsSortOrder = Ascending, SIP_PYCALLABLE /AllowNone/ = 0) [void (QVector<int>, Qics::QicsSortOrder = Ascending, DataItemComparator = 0)];
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp -> QicsGrid::orderColumnsBy(*a0, a1, PyQicsTable_getComparator(a2));
        PyQicsTable_releaseComparator(a2);
        
        Py_END_ALLOW_THREADS
%End

%VirtualCatcherCode
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "BeT", &a0, a1, a2, PyQicsTable_wrapComparator);
        
        if (result != NULL)
        {
            sipParseResult(&sipIsErr, sipMethod, result, "Z");
            Py_DECREF(result);
        }
%End
};

