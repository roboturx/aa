// QicsTableCommon.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
// 
// This file is part of PyQicsTable.
// 
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
// 
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//typedef int InT;
class QicsTableCommon : QicsGridCommon
{
%TypeHeaderCode
#include <QicsTableCommon.h>
%End

public:
    QicsTableCommon(QObject * /TransferThis/ = 0, bool = false);
    virtual ~QicsTableCommon();
    QicsDataModel *dataModel() const;
    virtual void setDataModel(QicsDataModel *);
    QicsRow &rowRef(int);
    QicsRow *row(int, bool = true) /Factory/;
    QicsColumn &columnRef(int);
    QicsColumn *column(int, bool = true) /Factory/;
    QicsRepeatingRow &repeatingRowRef(int, unsigned int);
    QicsRepeatingRow *repeatingRow(int, unsigned int) /Factory/;
    QicsRepeatingColumn &repeatingColumnRef(int, unsigned int);
    QicsRepeatingColumn *repeatingColumn(int, unsigned int) /Factory/;
    QicsCell &cellRef(int, int);
    QicsCell *cell(int, int, bool = true) /Factory/;
    QicsMainGrid &mainGridRef();
    QicsMainGrid *mainGrid() /Factory/;
    QicsRowHeader &rowHeaderRef();
    QicsRowHeader *rowHeader() /Factory/;
    QicsColumnHeader &columnHeaderRef();
    QicsColumnHeader *columnHeader() /Factory/;
    Qics::QicsTableDisplayOption topHeaderVisible() const;
    Qics::QicsTableDisplayOption bottomHeaderVisible() const;
    Qics::QicsTableDisplayOption leftHeaderVisible() const;
    Qics::QicsTableDisplayOption rightHeaderVisible() const;
    int tableMargin() const;
    int tableSpacing() const;
    int gridSpacing() const;
    bool columnHeaderUsesModel() const;
    bool rowHeaderUsesModel() const;
    bool ignoreModelSizeChanges() const;
    void sortRows(QVector<int>, Qics::QicsSortOrder = Qics::Ascending, int = 0, int = -1, SIP_PYCALLABLE /AllowNone/ = 0);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp -> QicsTableCommon::sortRows(*a0, a1, a2, a3, PyQicsTable_getComparator(a4));
        PyQicsTable_releaseComparator(a4);
        
        Py_END_ALLOW_THREADS
%End

    void sortColumns(QVector<int>, Qics::QicsSortOrder = Qics::Ascending, int = 0, int = -1, SIP_PYCALLABLE /AllowNone/ = 0);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp -> QicsTableCommon::sortColumns(*a0, a1, a2, a3, PyQicsTable_getComparator(a4));
        PyQicsTable_releaseComparator(a4);
        
        Py_END_ALLOW_THREADS
%End
    // Second param for move{Rows,Columns} is QVector for Qt4, QMemArray for Qt3. qint32 <-> signed int ???
    void moveRows(int, const QVector<int> &);
    void moveColumns(int, const QVector<int> &);

public slots:
    void setTopHeaderVisible(Qics::QicsTableDisplayOption);
    void setBottomHeaderVisible(Qics::QicsTableDisplayOption);
    void setLeftHeaderVisible(Qics::QicsTableDisplayOption);
    void setRightHeaderVisible(Qics::QicsTableDisplayOption);
    void setTableMargin(int);
    void setTableSpacing(int);
    void setGridSpacing(int);
    void setRowHeaderUsesModel(bool);
    void setColumnHeaderUsesModel(bool);
    void setIgnoreModelSizeChanges(bool);
    void deleteColumn(int);
    void addColumns(int);
    void insertColumn(int);
    void deleteRow(int);
    void addRows(int);
    void insertRow(int);
    void setDefaultRowHeightInPixels(int);
    void setDefaultRowHeightInChars(int);
    void setDefaultColumnWidthInPixels(int);
    void setDefaultColumnWidthInChars(int);
};

