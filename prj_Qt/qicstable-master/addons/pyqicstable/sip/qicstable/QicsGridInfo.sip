// QicsGridInfo.sip generated by MetaSIP on Thu Aug 26 12:32:36 2010
//
// This file is part of the qicstable Python extension module.
//
// Copyright (c) 2004 - 2014
// 	Integrated Computer Solutions, Inc. <info@ics.com>
//
// This file is part of PyQicsTable.
//
// This copy of PyQicsTable is licensed for use under the terms of the
// PyQicsTable Commercial License Agreement version ICS-2.6.  See the file
// LICENSE for more details.
//
// PyQicsTable is supplied WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//typedef int InT;
class QicsGridInfo : QObject, Qics
{
%TypeHeaderCode
#include <QicsGridInfo.h>
%End

public:
    QicsGridInfo(Qics::QicsGridType);
    virtual ~QicsGridInfo();
    Qics::QicsGridType gridType() const;
    QicsDataModel *dataModel() const;
    void setDataModel(QicsDataModel *);
    // QValueVector is QVector
    QVector<QicsScreenGrid*> grids() const;
    void connectGrid(QicsScreenGrid *);
    void disconnectGrid(QicsScreenGrid *);
    virtual const QicsDataItem *cellValue(int, int) const;
    Qics::QicsRepaintBehavior gridRepaintBehavior() const;
    void setGlobalRepaintBehavior(Qics::QicsRepaintBehavior);
    void revertGlobalRepaintBehavior();
    void setGridRepaintBehavior(Qics::QicsRepaintBehavior);
    void revertGridRepaintBehavior();
    virtual void controlColumnsOf(QicsGridInfo *);
    virtual void controlRowsOf(QicsGridInfo *);
    int modelColumnIndex(int) const;
    int modelRowIndex(int) const;
    int visualColumnIndex(int) const;
    int visualRowIndex(int) const;
    QicsRegion modelRegion(QicsRegion) const;
    QicsRegion visualRegion(QicsRegion) const;
    void orderRowsBy(QVector <int>, Qics::QicsSortOrder = Qics::Ascending, int = 0, int = -1, SIP_PYCALLABLE /AllowNone/ = 0);
%MethodCode
        Py_BEGIN_ALLOW_THREADS

        sipCpp -> QicsGridInfo::orderRowsBy(*a0, a1, a2, a3, PyQicsTable_getComparator(a4));
        PyQicsTable_releaseComparator(a4);

        Py_END_ALLOW_THREADS
%End

    void orderColumnsBy(QVector<int>, Qics::QicsSortOrder = Qics::Ascending, int = 0, int = -1, SIP_PYCALLABLE /AllowNone/ = 0);
%MethodCode
        Py_BEGIN_ALLOW_THREADS

        sipCpp -> QicsGridInfo::orderColumnsBy(*a0, a1, a2, a3, PyQicsTable_getComparator(a4));
        PyQicsTable_releaseComparator(a4);

        Py_END_ALLOW_THREADS
%End
    virtual QMimeData *cutCopyData(QWidget * = 0, QicsICell * = 0); // return QMimeData for PyQt4, QDragObject for PyQt3
    virtual void finishCut(bool);
    void paste(const QMimeData *, const QicsICell &);
    void overlay(const QicsDataModel &, const QicsICell &, bool = false, bool = true);
    QicsICell currentCell() const;
    virtual void setCurrentCell(const QicsICell &);
    int firstNonHiddenRow(int, int) const;
    int lastNonHiddenRow(int, int) const;
    int firstNonHiddenColumn(int, int) const;
    int lastNonHiddenColumn(int, int) const;
    bool ignoreModelSizeChanges() const;
    virtual void reportSelection(Qics::QicsSelectionType, int, int, int, int);

//    void setRowFilter(int, QRegExp);
//    void removeRowFilter(int);
//    void removeAllRowFilters();
    QicsRowFilter *rowFilter() const;


signals:
    void gridAdded(QicsScreenGrid *);
    void gridRemoved(QicsScreenGrid *);
    void globalSetRepaintBehaviorRequest(Qics::QicsRepaintBehavior);
    void globalRevertRepaintBehaviorRequest();
    void modelReordered(Qics::QicsIndexType);
    void currentCellChanged(int, int);
    void cellValueChanged(int, int);

public slots:
    void deleteRows(int, int);
    void insertRow(int);
    // QmemArray - QVector for Qt4 unsigned <-> int
    void moveRows(int, const QVector<int> &);
    void moveColumns(int, const QVector<int> &);
    void deleteColumns(int, int);
    void insertColumn(int);
    void redrawAllGrids();
    virtual void redrawModel(QicsRegion);
    virtual void setCellValue(int, int, const QicsDataItem &);
    virtual void setCurrentCellValue(const QicsDataItem &);
    void setIgnoreModelSizeChanges(bool);
};

